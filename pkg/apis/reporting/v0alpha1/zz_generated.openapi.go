//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v0alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.DashboardReference": schema_pkg_apis_reporting_v0alpha1_DashboardReference(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Report":             schema_pkg_apis_reporting_v0alpha1_Report(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportList":         schema_pkg_apis_reporting_v0alpha1_ReportList(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportOptions":      schema_pkg_apis_reporting_v0alpha1_ReportOptions(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportSpec":         schema_pkg_apis_reporting_v0alpha1_ReportSpec(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportStatus":       schema_pkg_apis_reporting_v0alpha1_ReportStatus(ref),
		"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Schedule":           schema_pkg_apis_reporting_v0alpha1_Schedule(ref),
	}
}

func schema_pkg_apis_reporting_v0alpha1_DashboardReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "Dashboard UID (name in apiserver)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeRange": {
						// TODO....
						SchemaProps: spec.SchemaProps{
							Description: "Query time range",
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{Allows: true},
						},
					},
					"variables": {
						SchemaProps: spec.SchemaProps{
							Description: "Variables used while rendering the report",
							Ref:         ref("github.com/grafana/grafana/pkg/apimachinery/apis/common/v0alpha1.Unstructured"),
						},
					},
				},
				Required: []string{"uid", "timeRange"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/apimachinery/apis/common/v0alpha1.Unstructured",
		},
	}
}

func schema_pkg_apis_reporting_v0alpha1_Report(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Report definition",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Report status",
							Ref:         ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportSpec", "github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_reporting_v0alpha1_ReportList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Report"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Report", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_reporting_v0alpha1_ReportOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"orientation": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"layout": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"orientation", "layout"},
			},
		},
	}
}

func schema_pkg_apis_reporting_v0alpha1_ReportSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReportSpec defines the report generation behavior",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"title": {
						SchemaProps: spec.SchemaProps{
							Description: "Report title",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"recipients": {
						SchemaProps: spec.SchemaProps{
							Description: "Send report to",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replyTo": {
						SchemaProps: spec.SchemaProps{
							Description: "Reply email address",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message body",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Reporting schedule",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Schedule"),
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Layout options for the report",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportOptions"),
						},
					},
					"enableDashboardUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Adds a dashboard url to the bottom of the report email.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "The current edit state\n\nPossible enum values:\n - `\"draft\"` Work in progress\n - `\"expired\"`\n - `\"not scheduled\"` Ready, but not scheduled\n - `\"paused\"` Comment on paused\n - `\"scheduled\"`",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
							Enum:        []interface{}{"draft", "expired", "not scheduled", "paused", "scheduled"},
						},
					},
					"dashboards": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"uid",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Dashboards used to render the report",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.DashboardReference"),
									},
								},
							},
						},
					},
					"formats": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scaleFactor": {
						SchemaProps: spec.SchemaProps{
							Description: "Scale the dashboard",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"title", "recipients", "replyTo", "message", "schedule", "options", "enableDashboardUrl", "state", "dashboards", "formats", "scaleFactor"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.DashboardReference", "github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.ReportOptions", "github.com/grafana/grafana/pkg/extensions/apis/reporting/v0alpha1.Schedule"},
	}
}

func schema_pkg_apis_reporting_v0alpha1_ReportStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Dummy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"scheduled": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
				},
				Required: []string{"scheduled"},
			},
		},
	}
}

func schema_pkg_apis_reporting_v0alpha1_Schedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"startDate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"endDate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"frequency": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"intervalFrequency": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"intervalAmount": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"workdaysOnly": {
						SchemaProps: spec.SchemaProps{
							Default: false,
							Type:    []string{"boolean"},
							Format:  "",
						},
					},
					"timeZone": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"startDate", "endDate", "frequency", "intervalFrequency", "intervalAmount", "workdaysOnly", "timeZone"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
